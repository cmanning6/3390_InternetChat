
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.Timer;
import javax.swing.WindowConstants;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author chad
 */
public class ClientRep extends javax.swing.JFrame {
    RepAgent agent;

    public String ID;
    private String recipient;
    private ArrayList<JTextPane> clientBoards;
    public Map<Integer, JTextPane> clients;
    
    /**
     * Creates new form ClientRep
     */
    ClientRep() {
        initComponents();
        clientBoards = new ArrayList<>();
        clients = new HashMap<>();

        ID = "REPRESENTATIVE@1011";
        clientBoards.add(getMsgBrd());
        recipient = "Welcome!";
        clients.put(recipient.hashCode(), getMsgBrd());
        new Thread(agent = new RepAgent(this)).start();
        agent.sendMessage(ID);

    }
    
    public void appendToPane(JTextPane tp, String msg, Color c) {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }

    public void addTab(String uId) {
        JTextPane brd = new JTextPane();
        clientBoards.add(brd);
        clients.put(uId.hashCode(), brd);
        if (mainPanel.getTitleAt(0).equals("Welcome!"))
            mainPanel.remove(0);
        
        mainPanel.addTab(uId, brd);

        appendToPane(clients.get(uId.hashCode()), uId + " has connected!\n", Color.black);
        recipient = mainPanel.getTitleAt(mainPanel.getSelectedIndex());
        revalidate();
        repaint();
    }

    public JTextPane getMsgBrd() {
        return msgBrd;
    }

    public JTextPane getActivePanel() {
        return clients.get(recipient.hashCode());
    }

    public void disconnect(String uName) {
        for (int i = 0; i < mainPanel.getComponentCount(); ++i) {
            if (mainPanel.getTitleAt(i).equals(uName)) {
                System.out.println("here");
                mainPanel.setTitleAt(i, uName + " disconnected");
                appendToPane(clients.get(uName.hashCode()), uName + " has disconnected\n", Color.black);
                clients.remove(uName.hashCode());
            }
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        msgBrd = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea1 = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("3390 - Representative");

        mainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainPanelMouseClicked(evt);
            }
        });

        jScrollPane2.setFocusable(false);

        msgBrd.setFocusable(false);
        jScrollPane2.setViewportView(msgBrd);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
        );

        mainPanel.addTab("Welcome!", jPanel1);

        textArea1.setColumns(20);
        textArea1.setLineWrap(true);
        textArea1.setRows(5);
        textArea1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textArea1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                textArea1FocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(textArea1);

        sendButton.setText("Send");
        sendButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(mainPanel))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(163, 163, 163)
                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendButtonMouseClicked
        // TODO add your handling code here:
        agent.sendMessage(recipient + " " + ID + ": " + textArea1.getText());
        textArea1.setText("");
    }//GEN-LAST:event_sendButtonMouseClicked

    private void mainPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseClicked
        // TODO add your handling code here:

        recipient = mainPanel.getTitleAt(mainPanel.getSelectedIndex());
        if (mainPanel.getTitleAt(mainPanel.getSelectedIndex()).contains("disconnected"))
            mainPanel.remove(mainPanel.getSelectedIndex());
    }//GEN-LAST:event_mainPanelMouseClicked

    private void textArea1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textArea1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_textArea1FocusGained

    private void textArea1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textArea1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_textArea1FocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientRep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientRep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientRep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientRep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientRep().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane mainPanel;
    private javax.swing.JTextPane msgBrd;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextArea textArea1;
    // End of variables declaration//GEN-END:variables
}

class RepAgent extends ChatAgent {
    ArrayList<Integer> clientList;
    ClientRep rep;


    public RepAgent(ClientRep r) {
        super(r.getMsgBrd(), r.ID);
        rep = r;
        clientList = new ArrayList<>();
    }

    @Override
    public void run ()  {
        String uID;
        String msg;

        try {
            rep.appendToPane( board,"Welcome representative.\n Waiting for clients...\n", Color.black);
            while ( true ) {


                msg = (String) in.readObject();
                uID = msg.split(":")[0];
                if (uID.contains("DISCONNECT"))
                    uID = uID.split(" ")[1];
                msg += '\n';
                try {
                    if (msg.split(" ")[0].equals("DISCONNECT")) {
                        rep.disconnect(uID);
                    } else
                        switch (uID.split("@")[0]) {
                            case "REPRESENTATIVE" :
                                rep.appendToPane(rep.getActivePanel(), msg, Color.black);
                                break;
                            default :
    //                        rep.clients.get(uID.hashCode()).append(msg + "\n");
                            rep.appendToPane(rep.clients.get(uID.hashCode()), msg, Color.blue);

                        }
//                        rep.clients.get(uID.hashCode()).append(msg + "\n");
                } catch (NullPointerException n) {
                    if (!(uID.equals(uName))) {
                        clientList.add(uID.hashCode());
                        rep.addTab(uID);
                    }
                    else
                        rep.disconnect(uID.split(" ")[1]);
                }



            }
        }
        catch (Exception e) { e.printStackTrace(); }
        finally {
            sendMessage("DISCONNECT " + uName);
        }
    }

}